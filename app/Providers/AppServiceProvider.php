<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Blade;
use Modules\System\Models\Module;
use Modules\Notifications\Models\Notification;
use Modules\Notifications\View\Components\Frontend\NotificationsComponent;
use Modules\Accessibility\View\Components\AccessibilityWidget;
use Modules\News\Models\News;
use App\Observers\NewsObserver;
// üé® –î–û–ë–ê–í–õ–ï–ù–û: –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞
use Modules\Visual\Models\Theme;

class AppServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    }

    public function boot(): void
    {
        $modulesPath = base_path('modules');

        // üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        \View::addNamespace('Install', base_path('modules/Install/Views'));
        if (!app()->runningInConsole() && !file_exists(storage_path('install.lock'))) {
            if (!request()->is('install*')) {
                redirect('/install')->send(); // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
            }
            return; // ‚õî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        }

        // ‚úÖ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
        if (file_exists(storage_path('install.lock'))) {
            // üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            $this->syncModuleMetadata();
        }

        // üß© –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å
        News::observe(NewsObserver::class);

        // üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
        if (
            file_exists(storage_path('install.lock')) &&
            class_exists(Module::class) &&
            Schema::hasTable('modules')
        ) {
            $activeModules = Module::where('active', true)->pluck('name');

            foreach ($activeModules as $moduleName) {
                $base = $modulesPath . '/' . $moduleName;

                if (!is_dir($base)) {
                    // üßπ –ú–æ–¥—É–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ ‚Äî —á–∏—Å—Ç–∏–º –∑–∞–ø–∏—Å—å
                    Module::where('name', $moduleName)->delete();
                    continue;
                }

                // 1) –ú–∞—Ä—à—Ä—É—Ç—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å)
                if (file_exists("{$base}/Routes/web.php")) {
                    $this->loadRoutesFrom("{$base}/Routes/web.php");
                }

                // 2) –í—å—é—Ö–∏ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
                $viewsDirs = [
                    "{$base}/Views",
                    "{$base}/Resources/views",
                ];
                foreach ($viewsDirs as $dir) {
                    if (is_dir($dir)) {
                        $this->loadViewsFrom($dir, $moduleName);
                    }
                }

                // 3) –ú–∏–≥—Ä–∞—Ü–∏–∏ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
                $migrationsDirs = [
                    "{$base}/Migrations",
                    "{$base}/Database/Migrations",
                ];
                foreach ($migrationsDirs as $dir) {
                    if (is_dir($dir)) {
                        $this->loadMigrationsFrom($dir);
                    }
                }

                // 4) –ü–µ—Ä–µ–≤–æ–¥—ã ‚Äî –æ–±–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
                $langDirs = [
                    "{$base}/Lang",
                    "{$base}/Resources/lang",
                ];
                foreach ($langDirs as $dir) {
                    if (is_dir($dir)) {
                        $this->loadTranslationsFrom($dir, $moduleName);
                    }
                }

                // 5) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑ module.json ‚Äî –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                $moduleJson = "{$base}/module.json";
                if (file_exists($moduleJson)) {
                    try {
                        $meta = json_decode(file_get_contents($moduleJson), true) ?: [];
                        if (!empty($meta['providers']) && is_array($meta['providers'])) {
                            foreach ($meta['providers'] as $providerClass) {
                                if (class_exists($providerClass)) {
                                    $this->app->register($providerClass);
                                }
                            }
                        }
                    } catch (\Throwable $e) {
                        // –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞—Ç—å
                    }
                }
            }
        }

        // üîß –†—É—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ install.lock)
        $this->loadRoutesFrom("{$modulesPath}/Users/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Users/Views", 'users');

        $this->loadRoutesFrom("{$modulesPath}/Search/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Search/Views", 'Search');

        $this->loadViewsFrom("{$modulesPath}/Categories/Views", 'Categories');
        $this->loadViewsFrom("{$modulesPath}/News/Views", 'News');

        $this->loadRoutesFrom("{$modulesPath}/Slideshow/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Slideshow/Views", 'Slideshow');
        $this->loadMigrationsFrom("{$modulesPath}/Slideshow/Migrations");

        $this->loadRoutesFrom("{$modulesPath}/Messages/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Messages/Views", 'messages');
        $this->loadMigrationsFrom("{$modulesPath}/Messages/Migrations");

        $this->loadRoutesFrom("{$modulesPath}/Payments/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Payments/Views", 'Payments');
        $this->loadMigrationsFrom("{$modulesPath}/Payments/Migrations");

        $this->loadRoutesFrom("{$modulesPath}/Delivery/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Delivery/Views", 'Delivery');
        $this->loadMigrationsFrom("{$modulesPath}/Delivery/Migrations");

        $this->loadRoutesFrom("{$modulesPath}/Menu/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Menu/Views", 'Menu');
        $this->loadMigrationsFrom("{$modulesPath}/Menu/Migrations");

        // üîî –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        $this->loadViewsFrom("{$modulesPath}/Notifications/Resources/views", 'Notifications');
        Blade::component('frontend-notifications', NotificationsComponent::class);

        // ‚ôø Accessibility –º–æ–¥—É–ª—å
        $this->loadRoutesFrom("{$modulesPath}/Accessibility/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/Accessibility/Views", 'Accessibility');
        if (is_dir("{$modulesPath}/Accessibility/Migrations")) {
            $this->loadMigrationsFrom("{$modulesPath}/Accessibility/Migrations");
        }
        Blade::component('accessibility-widget', AccessibilityWidget::class);

        // üì∞ NewsIO ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 2: —á–µ—Ä–µ–∑ AppServiceProvider)
        $this->loadRoutesFrom("{$modulesPath}/NewsIO/Routes/web.php");
        $this->loadViewsFrom("{$modulesPath}/NewsIO/Views", 'NewsIO'); // <-- —Ö–∏–Ω—Ç –¥–ª—è –≤—å—é—Ö
        if (is_dir("{$modulesPath}/NewsIO/Migrations")) {
            $this->loadMigrationsFrom("{$modulesPath}/NewsIO/Migrations");
        }
        // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–π –≤—å—é—Ö: "Views" –∏ "resources/views"
        if (is_dir("{$modulesPath}/NewsIO/Views")) {
            $this->loadViewsFrom("{$modulesPath}/NewsIO/Views", 'NewsIO');
        } elseif (is_dir("{$modulesPath}/NewsIO/resources/views")) {
            $this->loadViewsFrom("{$modulesPath}/NewsIO/resources/views", 'NewsIO');
        }
        if (is_dir("{$modulesPath}/NewsIO/Migrations")) {
            $this->loadMigrationsFrom("{$modulesPath}/NewsIO/Migrations");
        }

        // üì© –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        View::composer('*', function ($view) {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            $view->with('notifications', Notification::where('enabled', true)->get());

            // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (–±–µ–∑ –ø–∞–¥–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç)
            try {
                if (
                    class_exists(\Modules\Accessibility\Models\AccessibilitySetting::class) &&
                    Schema::hasTable('accessibility_settings')
                ) {
                    $settings = \Modules\Accessibility\Models\AccessibilitySetting::settings();
                    $view->with('accessibility', $settings);
                } else {
                    $view->with('accessibility', null);
                }
            } catch (\Throwable $e) {
                $view->with('accessibility', null);
            }
        });

        View::composer('layouts.*', function ($view) {
            try {
                $theme = class_exists(Theme::class) && Schema::hasTable('visual_themes')
                    ? Theme::where('is_default', true)->first()
                    : null;
            } catch (\Throwable $e) {
                $theme = null;
            }
            $view->with('__activeTheme', $theme);
        });

        // ‚úÖ JWT API –º–∞—Ä—à—Ä—É—Ç—ã
        if (file_exists(base_path('routes/api.php'))) {
            $this->loadRoutesFrom(base_path('routes/api.php'));
        }
    }

    /**
     * üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç title –∏ priority –º–æ–¥—É–ª–µ–π –∏–∑ module.json
     */
    protected function syncModuleMetadata(): void
    {
        $moduleDirectories = File::directories(base_path('modules'));

        foreach ($moduleDirectories as $modulePath) {
            $moduleName = basename($modulePath);
            $moduleJsonPath = $modulePath . DIRECTORY_SEPARATOR . 'module.json';

            if (!File::exists($moduleJsonPath)) continue;

            try {
                $jsonContent = File::get($moduleJsonPath);
                $metadata = json_decode($jsonContent, true);
            } catch (\Exception $e) {
                continue;
            }

            if (json_last_error() !== JSON_ERROR_NONE || !is_array($metadata)) continue;
            if (!isset($metadata['title']) || !isset($metadata['priority'])) continue;

            $module = Module::where('name', $moduleName)->first();
            if (!$module) continue;

            $module->title = $metadata['title'];
            $module->priority = $metadata['priority'];
            $module->save();
        }
    }
}
