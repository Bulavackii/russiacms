<?php

namespace Modules\Payments\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use Modules\Payments\Models\Order;
use Modules\Payments\Models\OrderItem;
use Modules\News\Models\News;

class OrderController extends Controller
{
    /**
     * üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ
     */
    public function index()
    {
        // üü¢ –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        Order::where('is_new', true)->update(['is_new' => false]);

        // üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
        $orders = Order::with(['paymentMethod', 'deliveryMethod', 'items', 'user'])
            ->latest()
            ->paginate(15);

        // üìÑ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        return view('Payments::admin.orders.index', compact('orders'));
    }

    /**
     * üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
     */
    public function show(Order $order)
    {
        $order->load(['items', 'paymentMethod', 'deliveryMethod', 'user']);

        return view('Payments::admin.orders.show', compact('order'));
    }

    /**
     * üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ —Ñ–æ—Ä–º—ã)
     */
    public function store(Request $request)
    {
        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        $request->validate([
            'items'              => 'required|array',
            'items.*.id'         => 'required|integer|exists:news,id',
            'items.*.qty'        => 'required|integer|min:1',
            'payment_method_id'  => 'required|exists:payment_methods,id',
            'delivery_method_id' => 'nullable|exists:delivery_methods,id',
        ]);

        // üîê –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: –∑–∞–∫–∞–∑ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        DB::transaction(function () use ($request) {
            // üíæ –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
            $order = Order::create([
                'user_id'           => auth()->id(),
                'status'            => 'new',
                'is_new'            => true,
                'payment_method_id' => $request->payment_method_id,
                'delivery_method_id'=> $request->delivery_method_id,
            ]);

            // üßæ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
            foreach ($request->items as $item) {
                $product = News::findOrFail($item['id']);

                // ‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
                if (!is_null($product->stock) && $product->stock < $item['qty']) {
                    throw new \Exception('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ: ' . $product->title);
                }

                // üíΩ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ OrderItem
                OrderItem::create([
                    'order_id'   => $order->id,
                    'product_id' => $product->id,
                    'qty'        => $item['qty'],
                    'price'      => $product->price,
                ]);

                // üßÆ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
                if (!is_null($product->stock)) {
                    $product->decrement('stock', $item['qty']);
                }
            }
        });

        // üîÅ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        return redirect()
            ->route('dashboard.orders')
            ->with('success', '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –æ—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.');
    }
}
